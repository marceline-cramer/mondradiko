# Copyright (c) 2020-2021 the Mondradiko contributors.
# SPDX-License-Identifier: LGPL-3.0-or-later

from email.utils import formatdate

PREAMBLE_TEMPLATE = """
// Mondradiko scripting API - {summary}
// https://mondradiko.github.io/
// Generated by generate_binding.py on {timestamp}
"""[1:]


def preamble(summary):
    """Create a timestamped header describing the file."""
    return PREAMBLE_TEMPLATE.format(summary=summary, timestamp=formatdate())


class Codegen:
    """Base class for generating classdef wrappers."""

    def __init__(self, output_file, component):
        self.output_file = output_file

        self.classdef_name = component["name"]
        self.storage_type = component["storage_type"]
        self.internal_name = component["internal_name"]
        self.internal_header = component["internal_header"]

        self.dependencies = []
        if "dependencies" in component.keys():
            self.dependencies = component["dependencies"]

        self.methods = []
        self.out = []

    def add_method(self, method_name, method):
        """Register a given method."""
        raise NotImplementedError()

    def finish(self):
        """Finish generating code and write it to the output file."""
        raise NotImplementedError()

    def _finish(self):
        with open(self.output_file, "w") as out_file:
            out_file.write("\n".join(self.out))
